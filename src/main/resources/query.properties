
GET_ESN_TSN_DETAILS=SELECT     final_true_tsn_id,     c_eng_tsn.c_eng_tsn_id id,     esn,     start_date,     esn_tsn,     'TLK' source,     maxi.Acronym comments FROM     c_eng_tsn                 left outer JOIN                 (SELECT         e.c_eng_tsn_id,                        max(main_cat) as m,                                                           Acronym     from         c_eng_event e, c_event_cat     where         e.event_cat_id = c_event_cat.event_cat_id     group by e.c_eng_tsn_id) maxi ON c_eng_tsn.c_eng_tsn_id = maxi.c_eng_tsn_id where     c_eng_tsn.esn = ?         and c_eng_tsn.final_true_tsn_id is null         and validated is null         and esn_tsn is not null UNION SELECT     final_true_tsn_id,     mas_ID id,     mas_EngineSN,     mas_StartDate start_date,     mas_EngTSN,     'WIZ' source,     mas_TSN_Comment comments from     tbl_master where     tbl_master.mas_EngineSN = ?         and final_true_tsn_id is null         and validated is null         and mas_EngTSN is not null ORDER BY source , start_date
GET_EVENT_DETAILS_TLK=SELECT event_id, c_eng_tsn_id, c_eng_event.event_type_id, event_type, event_number, main_concern, reason_for, c_eng_event.event_cat_id, event_cat, acronym, field_depot_office, c_eng_event.bus_code_id, bus_name, unplan_plan                 FROM c_eng_event                 LEFT JOIN c_event_type ON c_eng_event.event_type_id = c_event_type.event_type_id   LEFT JOIN c_event_cat ON c_eng_event.event_cat_id = c_event_cat.event_cat_id  LEFT JOIN c_shop_code ON c_eng_event.bus_code_id = c_shop_code.bus_code_id   WHERE c_eng_tsn_id = ?
GET_ESN_TSN_NEW_UPLOADED=SELECT final_true_tsn_id,   c_eng_tsn_id id,   esn,   start_date,   esn_tsn,validated source,ongoing_final FROM c_final_esn_tsn where (validated='K' or validated='X') and esn=? and esn_tsn is not null order by start_date
GET_ESN_TSN_MERGED=SELECT final_true_tsn_id,   c_eng_tsn_id id,wizard_mas_id,   esn,   start_date,   esn_tsn,validated source,validated_by,ongoing_final FROM c_final_esn_tsn where final_true_tsn_id is  not null and esn=? and validated is not null  and esn_tsn is not null order by start_date
UPDATE_TSN_FOR_MERGED=update c_final_esn_tsn set esn_tsn=?,validated_by=?,start_date=? where final_true_tsn_id=? and c_eng_tsn_id=? and wizard_mas_id=?
UPDATE_ON_GOING_TO_FINAL=update c_final_esn_tsn set ongoing_final='F' where final_true_tsn_id=?
GET_TSN_FROM_TLOKEN=SELECT esn_tsn,start_date FROM   c_eng_tsn where final_true_tsn_id=? and  c_eng_tsn_id=?
GET_TSN_FROM_WIZARD=SELECT   mas_EngTSN esn_tsn,mas_StartDate start_date from tbl_master where final_true_tsn_id=? and   mas_ID=?
GET_MAX_START_DATE=select max(start_date) from c_final_esn_tsn where esn=? and validated is not null  and start_date<?
GET_LAST_TSN_FOR_ESN=select max(esn_tsn) from c_final_esn_tsn where start_date = ? and esn=? and validated is not null
GET_AVAILABLE_POINTS_TSN=SELECT     maxi.event_cat_id as cat,     t.c_eng_tsn_id,     start_date,     t.esn,     t.esn_tsn,     t.aprox,     maxi.event_cat FROM     c_final_esn_tsn t         INNER JOIN     (SELECT         e.c_eng_tsn_id,             e.event_cat_id,             max(main_cat) as m,             event_cat     from         c_eng_event e, c_event_cat     where         e.event_cat_id = c_event_cat.event_cat_id      group by e.c_eng_tsn_id) maxi ON t.c_eng_tsn_id = maxi.c_eng_tsn_id WHERE     esn = ? and validated is not null ORDER BY start_date ASC
GET_EVENT_DETAILS_WIZ=SELECT distinct tbl_sources.mas_ID, tbl_sources.source_id, IF(tbl_sources.trans_type='PAC', pac_id, IF(tbl_sources.trans_type='SMT', sir_ID, IF(tbl_sources.trans_type='CPR', scp_id, IF(tbl_sources.trans_type='DPT', der_id, IF(tbl_sources.trans_type='FLT', fen_id, IF(tbl_sources.trans_type='EVT', CONCAT(fev_esn_removed, '-', DATE_FORMAT(fev_event_date, '%d-%b-%y')), IF(tbl_sources.trans_type='SBE', sbe_id, NULL))))))) AS event_number, tbl_sources.trans_type as event_type, event_cat as scope,CONCAT(tbl_master.mas_removal_cause , " by ",  tbl_master.mas_modules) AS main_concern FROM tbl_sources LEFT JOIN tbl_pac ON tbl_sources.source_id = tbl_pac.pac_new_id AND tbl_sources.trans_type = 'PAC' LEFT JOIN tbl_smartir ON tbl_sources.source_id = tbl_smartir.smart_new_id AND tbl_sources.trans_type = 'SMT' LEFT JOIN tbl_smartcpr ON tbl_sources.source_id = tbl_smartcpr.cpr_new_id AND tbl_sources.trans_type = 'CPR' LEFT JOIN tbl_depot_report ON tbl_sources.source_id = tbl_depot_report.depot_rep_new_id AND tbl_sources.trans_type = 'DPT' LEFT JOIN tbl_fleetengine ON tbl_sources.source_id = tbl_fleetengine.fleet_new_id AND tbl_sources.trans_type = 'FLT' LEFT JOIN tbl_fleetevent ON tbl_sources.source_id = tbl_fleetevent.fleet_event_new_id AND tbl_sources.trans_type = 'EVT' LEFT JOIN tbl_sbesn ON tbl_sources.source_id = tbl_sbesn.sb_esn_new_id AND tbl_sources.trans_type = 'SBE'  LEFT JOIN tbl_master ON tbl_master.mas_ID = tbl_sources.mas_id LEFT JOIN c_event_cat ON c_event_cat.event_cat_id = tbl_master.event_cat_id_by_workscope WHERE tbl_sources.mas_ID=? and tbl_master.mas_EngineSN=?

GET_DATA_FOR_GRAPH=SELECT     start_date,     esn_tsn,     'TLOKEN' source FROM     c_eng_tsn where     c_eng_tsn.esn =? and final_true_tsn_id is null         and validated is null and esn_tsn is not null UNION SELECT      mas_StartDate start_date,     mas_EngTSN,     'Wizard' source from     tbl_master where     tbl_master.mas_EngineSN = ? and final_true_tsn_id is null         and validated is null and mas_EngTSN is not null Union SELECT start_date,   esn_tsn,'Merged' source FROM c_final_esn_tsn where final_true_tsn_id is  not null and esn=? and c_eng_tsn_id is not null and wizard_mas_id is not null and validated is not null and esn_tsn is not null ORDER BY start_date,source

GET_CATEGORY_LIST=SELECT event_cat_id, event_cat FROM c_event_cat 
CATEGORY_LIST_CON_DEFAULT= where plan = 'Y' and field = 'Y' and inPack = 'Y'
GET_EVENT_TYPE_LIST=SELECT * FROM c_event_type 
EVENT_TYPE_LIST_CON_DEFAULT= where field = 'Y'
GET_PROVIDER_LIST=SELECT * FROM c_shop_code 
PROVIDER_LIST_CON_DEFAULT= where field = 'Y'

ADD_NEW_EVENT=INSERT INTO c_eng_event (c_eng_tsn_id,event_type_id,event_number,main_concern,reason_for, event_cat_id, bus_code_id,event_create_user,event_create_date) VALUES (?,?,?,?,?,?,?,?,?)
UPDATE_TSN_MERGED_DATA=update c_final_esn_tsn set esn_tsn=?,validated_by=?,start_date=? where final_true_tsn_id=?

GET_DATA_FOR_GRAPH_TLK=SELECT     start_date,     esn_tsn,     'TLOKEN' source FROM     c_eng_tsn where     c_eng_tsn.esn =? and final_true_tsn_id is null         and validated is null and esn_tsn is not null ORDER BY start_date
GET_DATA_FOR_GRAPH_WIZ=SELECT      mas_StartDate start_date,     mas_EngTSN esn_tsn,     'Wizard' source from     tbl_master where     tbl_master.mas_EngineSN = ? and final_true_tsn_id is null         and validated is null and mas_EngTSN is not null ORDER BY start_date
GET_DATA_FOR_GRAPH_MERGED=SELECT start_date,   esn_tsn,'Merged' source FROM c_final_esn_tsn where final_true_tsn_id is  not null and esn=?  and validated is not null  and esn_tsn is not null ORDER BY start_date
GET_START_DATES_GRAPH=SELECT  distinct    c_eng_tsn.start_date FROM     c_eng_tsn where     c_eng_tsn.esn = ?        and final_true_tsn_id is null         and validated is null         and esn_tsn is not null UNION SELECT     mas_StartDate start_date from     tbl_master where     tbl_master.mas_EngineSN = ?        and final_true_tsn_id is null         and validated is null         and mas_EngTSN is not null Union SELECT     start_date FROM     c_final_esn_tsn where     final_true_tsn_id is not null         and esn = ?        and validated is not null         and esn_tsn is not null ORDER BY start_date
GET_EVENT_MERGED=SELECT 			event_id, event_number, event_type,event_cat, main_concern           FROM c_eng_event                 LEFT JOIN c_event_type ON c_eng_event.event_type_id = c_event_type.event_type_id   LEFT JOIN c_event_cat ON c_eng_event.event_cat_id = c_event_cat.event_cat_id  LEFT JOIN c_shop_code ON c_eng_event.bus_code_id = c_shop_code.bus_code_id   WHERE final_true_tsn_id = ? and event_number is not null 
GET_DUPLICATE_TSN_DATA=select count(start_date) from c_final_esn_tsn where esn=? and start_date=? and is_deleted='N'
CHECK_VALID_ESN_GIB=SELECT count(0) from g_gib where engine_sn_aero=?
GET_DUPLICATE_EVENT_DATA=select count(event_number) from c_eng_event where event_number=? and is_deleted='N'

#GET_OM_MANUAL_DETAILS=SELECT distinct limit_id,  f_manual_limits.change_id,  f_manual_limits.unit_serv, f_manual_limits.ref_dim_serv, f_manual_limits.serv_restrict, f_manual_limits.rep_restrict, f_manual_limits.unit_rep, f_manual_limits.ref_dim_rep, i_model.model_id,  i_model.model_desc,  f_manual_type.manual_id,  f_manual_type.manual_type,  component_id,  i_desc.description,  f_finding_cat.finding_id,  f_finding_cat.finding,  f_zone_cat.zone_id,  f_zone_cat.zone,  qty_serv,  dimension_serv,  qty_rep,  dimension_rep,  corrective_act,  table_reference, (select count(*) from f_compo_insp where limit_id = f_manual_limits.limit_id) count_associated_findings FROM    f_manual_limits                   inner join i_model on i_model.model_id= f_manual_limits.model_id inner join i_desc on f_manual_limits.component_id=i_desc.desc_id                 LEFT JOIN f_manual_type ON f_manual_type.manual_id= f_manual_limits.manual_id                 LEFT JOIN f_finding_cat ON f_finding_cat.finding_id= f_manual_limits.finding_id                 LEFT JOIN f_zone_cat    ON f_zone_cat.zone_id = f_manual_limits.zone_id WHERE    
GET_OM_MANUAL_DETAILS=SELECT distinct limit_id,  f_manual_limits.change_id,  f_manual_limits.unit_serv, f_manual_limits.ref_dim_serv, f_manual_limits.serv_restrict, f_manual_limits.rep_restrict, f_manual_limits.unit_rep, f_manual_limits.ref_dim_rep, i_model.model_id,  i_model.model_desc,  f_manual_type.manual_id,  f_manual_type.manual_type,  component_id,  i_desc.description,  f_finding_cat.finding_id,  f_finding_cat.finding,  f_zone_cat.zone_id,  f_zone_cat.zone,  qty_serv,  dimension_serv,  qty_rep,  dimension_rep,  corrective_act,  table_reference, (select count(*) from f_compo_insp where limit_id = f_manual_limits.limit_id and is_deleted='N') count_associated_findings FROM    f_manual_limits                   inner join i_model on i_model.model_id= f_manual_limits.model_id inner join i_desc on f_manual_limits.component_id=i_desc.desc_id                 LEFT JOIN f_manual_type ON f_manual_type.manual_id= f_manual_limits.manual_id                 LEFT JOIN f_finding_cat ON f_finding_cat.finding_id= f_manual_limits.finding_id                 LEFT JOIN f_zone_cat    ON f_zone_cat.zone_id = f_manual_limits.zone_id WHERE    


GET_ALL_OM_MANUAL_DETAILS=SELECT distinct limit_id,  f_manual_limits.change_id,  f_manual_limits.unit_serv, f_manual_limits.ref_dim_serv, f_manual_limits.serv_restrict, f_manual_limits.rep_restrict, f_manual_limits.unit_rep, f_manual_limits.ref_dim_rep, i_model.model_id,  i_model.model_desc,  f_manual_type.manual_id,  f_manual_type.manual_type,  component_id,  i_desc.description,  f_finding_cat.finding_id,  f_finding_cat.finding,  f_zone_cat.zone_id,  f_zone_cat.zone,  qty_serv,  dimension_serv,  qty_rep,  dimension_rep,  corrective_act,  table_reference, (select count(*) from f_compo_insp where limit_id = f_manual_limits.limit_id and is_deleted='N') count_associated_findings FROM    f_manual_limits                   inner join i_model on i_model.model_id= f_manual_limits.model_id inner join i_desc on f_manual_limits.component_id=i_desc.desc_id                LEFT JOIN f_manual_type ON f_manual_type.manual_id= f_manual_limits.manual_id                 LEFT JOIN f_finding_cat ON f_finding_cat.finding_id= f_manual_limits.finding_id                 LEFT JOIN f_zone_cat    ON f_zone_cat.zone_id = f_manual_limits.zone_id ORDER BY limit_id DESC    
#GET_ALL_OM_MANUAL_DETAILS=SELECT distinct limit_id,  f_manual_limits.change_id,  f_manual_limits.unit_serv, f_manual_limits.ref_dim_serv, f_manual_limits.serv_restrict, f_manual_limits.rep_restrict, f_manual_limits.unit_rep, f_manual_limits.ref_dim_rep, i_model.model_id,  i_model.model_desc,  f_manual_type.manual_id,  f_manual_type.manual_type,  component_id,  i_desc.description,  f_finding_cat.finding_id,  f_finding_cat.finding,  f_zone_cat.zone_id,  f_zone_cat.zone,  qty_serv,  dimension_serv,  qty_rep,  dimension_rep,  corrective_act,  table_reference, (select count(*) from f_compo_insp where limit_id = f_manual_limits.limit_id) count_associated_findings FROM    f_manual_limits                   inner join i_model on i_model.model_id= f_manual_limits.model_id inner join i_desc on f_manual_limits.component_id=i_desc.desc_id                LEFT JOIN f_manual_type ON f_manual_type.manual_id= f_manual_limits.manual_id                 LEFT JOIN f_finding_cat ON f_finding_cat.finding_id= f_manual_limits.finding_id                 LEFT JOIN f_zone_cat    ON f_zone_cat.zone_id = f_manual_limits.zone_id ORDER BY limit_id DESC    

GET_RECORD_COUNT_OM_MANUAL_DETAILS=select @rownum:=@rownum + 1 as row_number,        t.* from (SELECT distinct limit_id FROM i_ipb     INNER JOIN i_pn_desc ON i_ipb.part_number = i_pn_desc.part_number                 INNER JOIN i_desc ON i_desc.desc_id = i_pn_desc.desc_id                 INNER JOIN trans_gib_model ON i_ipb.model_id=trans_gib_model.model_id                 inner join i_model on i_model.model_id= trans_gib_model.model_id                 inner join i_product_line on i_product_line.prod_line_id=trans_gib_model.prod_line_id                 INNER join f_manual_limits  on f_manual_limits.component_id=i_desc.desc_id                                                                                                                 and f_manual_limits.model_id=trans_gib_model.model_id                 LEFT JOIN f_manual_type ON f_manual_type.manual_id= f_manual_limits.manual_id                 LEFT JOIN f_finding_cat ON f_finding_cat.finding_id= f_manual_limits.finding_id                 LEFT JOIN f_zone_cat    ON f_zone_cat.zone_id = f_manual_limits.zone_id WHERE 

GET_TOTAL_RECORD_COUNT_MANUAL_DETAILS=SELECT count(limit_id) as recordCount FROM f_manual_limits  LEFT JOIN     i_desc ON f_manual_limits.component_id= i_desc.desc_id  LEFT JOIN     i_model ON i_model.model_id= f_manual_limits.model_id LEFT JOIN     f_manual_type ON f_manual_type.manual_id= f_manual_limits.manual_id LEFT JOIN     f_finding_cat ON f_finding_cat.finding_id= f_manual_limits.finding_id  LEFT JOIN     f_zone_cat ON f_zone_cat.zone_id= f_manual_limits.zone_id order by limit_id desc

GET_ADD_OM_MODEL_ID=select model_Id, model_desc from i_model order by model_desc asc
GET_OM_MODEL_ID=select distinct  t1.model_id,t2.model_desc from trans_gib_model t1 left join i_model t2 on t1.model_id=t2.model_id where t1.prod_line_id=? order by if(t2.model_id=1,999,t2.model_id) asc

GET_OM_MANUAL_TYPE=select manual_id,manual_type from f_manual_type order by manual_type asc
#GET_ADD_OM_DESCRIPTION=SELECT distinct     a.desc_id desc_id,     a.description description,     a.part_number,     a.track,  a.llp,   if ( b.model_id is null , ?,b.model_id) model_id   FROM     (SELECT DISTINCT         i_desc.desc_id AS desc_id, i_desc.description AS description , i_pn_desc.part_number,   i_desc.track,  i_desc.llp,  i_desc.ebs_code,  i_desc.package FROM    i_desc     LEFT JOIN (select part_number,desc_id from i_pn_desc where part_number in (select part_number from  i_ipb where ipb_valid_rec='Y' and model_id=?)) i_pn_desc ON i_pn_desc.desc_id = i_desc.desc_id WHERE i_desc.description IS NOT NULL   GROUP BY i_desc.desc_id ) a  LEFT JOIN (SELECT  i_desc.desc_id AS desc_id,  i_desc.description AS description_,   i_pn_desc.part_number,  i_desc.track,   i_desc.llp,  i_desc.ebs_code,  i_desc.package, i_ipb.model_id     FROM i_desc, i_pn_desc, i_ipb, ipb_gek_reference     WHERE i_desc.description IS NOT NULL           AND i_pn_desc.desc_id = i_desc.desc_id           AND i_ipb.part_number = i_pn_desc.part_number           AND ipb_gek_reference.model_id = i_ipb.model_id    AND ipb_gek_reference.model_id = ? ) b ON a.desc_id = b.desc_id     ORDER BY description 
GET_ADD_OM_DESCRIPTION=SELECT DISTINCT     i_desc.desc_id AS desc_id, i_desc.description AS description,   i_pn_desc.part_number part_number,    i_desc.track track,  i_desc.llp llp,  i_ipb.model_id model_id  FROM     i_desc         LEFT JOIN i_pn_desc ON i_pn_desc.desc_id = i_desc.desc_id  LEFT JOIN (SELECT       part_number    ,model_id  FROM        i_ipb     WHERE model_id = ?   AND i_ipb.ipb_valid_rec = 'Y') i_ipb ON i_ipb.part_number = i_pn_desc.part_number  WHERE     i_desc.description IS NOT NULL      GROUP BY desc_id ORDER BY i_desc.description  
#GET_ADD_OM_DESCRIPTION=SELECT DISTINCT     i_desc.desc_id AS desc_id,     i_desc.description AS description,     i_pn_desc.part_number,     i_desc.track,     i_desc.llp,     i_ipb.model_id FROM     i_desc          JOIN     i_pn_desc ON i_pn_desc.desc_id = i_desc.desc_id          JOIN     (SELECT         *     FROM        i_ipb     WHERE         model_id =?       AND i_ipb.ipb_valid_rec = 'Y') i_ipb ON i_pn_desc.part_number = i_ipb.part_number    GROUP BY desc_id

GET_OM_DESCRIPTION=SELECT distinct                  i_desc.desc_id, i_desc.description AS description FROM    f_manual_limits                                    inner join (select distinct t1.prod_line_id, t1.model_id                                                                 from trans_gib_model t1 ) t2  on t2.model_id= f_manual_limits.model_id                                 inner join i_desc on f_manual_limits.component_id=i_desc.desc_id WHERE t2.prod_line_id=? AND t2.model_id=? order by i_desc.description asc  

GET_ALL_OM_DESCRIPTION=SELECT distinct                  i_desc.desc_id, i_desc.description AS description FROM    f_manual_limits                                    inner join (select distinct t1.prod_line_id, t1.model_id                                                                 from trans_gib_model t1 ) t2  on t2.model_id= f_manual_limits.model_id                                 inner join i_desc on f_manual_limits.component_id=i_desc.desc_id order by i_desc.description asc



#GET_OM_FINDING=SELECT distinct t4.finding_id, t5.finding FROM f_wo_compo t1   left join f_compo_q_pn t2 on t1.f_wo_compo_id = t2.f_wo_compo_id       left join f_compo_insp t3 on t2.f_compo_qpn_id = t3.f_compo_qpn_id               left join f_manual_limits t4 on t3.limit_id = t4.limit_id                    left join f_finding_cat t5 on t4.finding_id = t5.finding_id                    WHERE desc_id =? order by finding desc

GET_OM_FINDING=SELECT distinct t4.finding_id, t5.finding FROM   f_manual_limits t4       left join (select distinct prod_line_id,model_id from trans_gib_model ) t6 on t6.model_id =t4.model_id     left join f_finding_cat t5 on t4.finding_id = t5.finding_id      WHERE component_id =?      and   t6.prod_line_id =  ?   and t4.model_id=?    order by finding  asc



GET_ADD_OM_FINDING=select finding_id,finding from f_finding_cat order by finding asc
GET_ADD_OM_ZONE=select zone_id,zone from f_zone_cat order by zone asc

GET_OM_ZONE=select distinct  t2.zone_id, zone    from f_manual_limits t1 left join f_zone_cat t2 on t2.zone_id  = t1.zone_id where t1.component_id=? and  t1.finding_id=?  and t1.model_id=? order by zone asc


GET_PRODUCT_LINE=SELECT prod_line_id, prod_line FROM i_product_line order by prod_line asc
GET_OM_UNIT=select lov_value as lov_key, lov_description as lov_value from c_lov_tbl where lov_code='UNIT_MEASURE' order by seq_order


VIEW_OM_MANUAL_DETAILS=SELECT limit_id, change_id,i_model.model_id, i_model.model_desc, f_manual_type.manual_id,f_manual_type.manual_type,component_id,i_desc.description,f_finding_cat.finding_id,f_finding_cat.finding,f_zone_cat.zone_id,f_zone_cat.zone,qty_serv,dimension_serv,qty_rep,dimension_rep,corrective_act,table_reference,serv_restrict,unit_serv,ref_dim_serv,rep_restrict,unit_rep,ref_dim_rep,remark,reviewed  FROM f_manual_limits  LEFT JOIN     i_desc ON f_manual_limits.component_id= i_desc.desc_id  LEFT JOIN     i_model ON i_model.model_id= f_manual_limits.model_id LEFT JOIN     f_manual_type ON f_manual_type.manual_id= f_manual_limits.manual_id LEFT JOIN     f_finding_cat ON f_finding_cat.finding_id= f_manual_limits.finding_id  LEFT JOIN     f_zone_cat ON f_zone_cat.zone_id= f_manual_limits.zone_id where limit_id=? 
DELETE_OM_DATA=DELETE FROM  f_manual_limits WHERE limit_id=?
ADD_OM_MANUAL_DATA=INSERT INTO f_manual_limits(limit_id,component_id,manual_id,model_id,finding_id,zone_id,qty_serv,serv_restrict,dimension_serv,unit_serv,ref_dim_serv,qty_rep,rep_restrict,dimension_rep,unit_rep,ref_dim_rep,corrective_act,table_reference,reviewed,created_by,remark,created_date)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,NOW())
#ADD_OM_MANUAL_DATA=INSERT INTO f_manual_limits(limit_id,component_id) VALUES (?,?)

#EDIT_OM_MANUAL_DATA=update f_manual_limits set model_id=? where limit_id=?
EDIT_OM_MANUAL_DATA=UPDATE f_manual_limits SET component_id=?,manual_id = ?,model_id = ?,finding_id = ?,zone_id = ?,qty_serv = ?,serv_restrict = ?,dimension_serv = ?,unit_serv= ?,ref_dim_serv = ?,qty_rep= ?,rep_restrict = ?,dimension_rep = ?,unit_rep = ?,ref_dim_rep = ?,corrective_act= ?,table_reference= ?,remark=?,rev_by=?,rev_date=NOW(),reviewed=? WHERE limit_id = ?

GET_MAX_LIMIT_ID=select max(limit_id) from f_manual_limits


GET_FILTER_MANUAL_DETAILS=SELECT      limit_id,    change_id,  unit_serv, ref_dim_serv, serv_restrict, rep_restrict, unit_rep, ref_dim_rep,  i_model.model_id,    i_model.model_desc,    f_manual_type.manual_id, f_manual_type.manual_type,    component_id,    i_desc.description,    f_finding_cat.finding_id,    f_finding_cat.finding,      f_zone_cat.zone_id,    f_zone_cat.zone,    qty_serv,    dimension_serv,    qty_rep,    dimension_rep,    corrective_act,    table_reference, (select count(*) from f_compo_insp where limit_id = f_manual_limits.limit_id and is_deleted='N') count_associated_findings FROM             f_manual_limits                INNER JOIN    i_desc ON f_manual_limits.component_id = i_desc.desc_id      INNER JOIN    i_model ON i_model.model_id = f_manual_limits.model_id       INNER JOIN    f_manual_type ON f_manual_type.manual_id = f_manual_limits.manual_id      INNER JOIN    f_finding_cat ON f_finding_cat.finding_id = f_manual_limits.finding_id      INNER JOIN    f_zone_cat ON f_zone_cat.zone_id = f_manual_limits.zone_id where component_id <>17537 and (model_desc like ? or i_desc.description like ?  or   manual_type like ? or  finding like ? or zone like ? or corrective_act like ? or    table_reference like ? ) order by limit_id desc  
  
  


GET_OM_FINDING_COUNT=select Count(*) from f_compo_insp where limit_id=?  and is_deleted='N'


GET_FILTER_RECORD_COUNT=SELECT      count(limit_id)  FROM             f_manual_limits                INNER JOIN    i_desc ON f_manual_limits.component_id = i_desc.desc_id      INNER JOIN    i_model ON i_model.model_id = f_manual_limits.model_id       INNER JOIN    f_manual_type ON f_manual_type.manual_id = f_manual_limits.manual_id      INNER JOIN    f_finding_cat ON f_finding_cat.finding_id = f_manual_limits.finding_id      INNER JOIN    f_zone_cat ON f_zone_cat.zone_id = f_manual_limits.zone_id where component_id <>17537 and (model_desc like ? or i_desc.description like ?  or   manual_type like ? or  finding like ? or zone like ? or corrective_act like ? or    table_reference like ? )


GET_USER_ROLE=SELECT role_id FROM users where sso=? and is_active='Y'
GET_COUNTRY_LIST=select lov_value Country  from c_lov_tbl where lov_code = 'country_code' order by  lov_description asc
GET_MAX_FINDING_ID=select max(finding_id) from f_finding_cat

GET_MAX_ZONE_ID=select max(zone_id) from f_zone_cat

ADD_OM_FINDING_ID=INSERT INTO f_finding_cat (finding_id,finding) VALUES (?,?)

ADD_OM_ZONE_ID=INSERT INTO f_zone_cat (zone_id,zone) VALUES (?,?)

GET_COUNT_DUPLICATE_DATA=select count(*) from f_manual_limits where component_id=? and manual_id=? and model_id=? and finding_id=? and zone_id=? and qty_serv = ? and serv_restrict = ? and dimension_serv = ? and unit_serv= ? and ref_dim_serv = ? and qty_rep= ? and rep_restrict = ? and dimension_rep = ? and unit_rep = ? and ref_dim_rep = ?

GET_EDIT_COUNT_DUPLICATE_DATA=select count(*) from f_manual_limits where component_id=? and manual_id=? and model_id=? and finding_id=? and zone_id=? and qty_serv = ? and serv_restrict = ? and dimension_serv = ? and unit_serv= ? and ref_dim_serv = ? and qty_rep= ? and rep_restrict = ? and dimension_rep = ? and unit_rep = ? and ref_dim_rep = ? and limit_id<>?
ADD_ONM_MASSIVEUPLOAD_FILENAME=insert into oandm_file_stage (uploaded_by, uploaded_date, status) value (?, now(), 'N')
ONM_MAX_FILE_BATCHID=SELECT max(autobatchrun_id) FROM oandm_file_stage where uploaded_by = ? and status = 'N'
INSERT_ONM_MASSIVE_STAGE_TABLE=insert into oandm_file_detail_stage (autobatchrun_id, limit_id, model, manual_type, component, finding, zone, service_qty, service_restriction, service_dim, service_unit, service_ref_dimension, repair_unit, repair_ref_dimension, repair_qty, repair_restriction, repair_dim, corrective_actions, reference, finding_count, cbm_comments, cbm_action, doubtfull_due_to) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)

GET_ALL_OM_MANUAL_MASSIVE_PREVIOUS_DATA=select a.uploaded_by, b.* from  oandm_file_stage a,oandm_file_detail_stage b where a.autobatchrun_id=b.autobatchrun_id and a.status='N' and a.uploaded_by=?
GET_ONM_STAGING_COUNT=select count(*) from  oandm_file_stage a, oandm_file_detail_stage b where a.autobatchrun_id=b.autobatchrun_id and a.status='N' and a.uploaded_by=?
ONM_MASSIVESTAGE_DELETE_PREVIOUS_DETAILS=delete from oandm_file_detail_stage where autobatchrun_id in (select autobatchrun_id from oandm_file_stage where uploaded_by=?)
ONM_MASSIVESTAGE_DELETE_ERROR_LOGS=delete from oandm_error_log where uploaded_by=?
ONM_MASSIVESTAGE_DELETE_PREVIOUS_FILE=delete from oandm_file_stage where uploaded_by=?
GET_ALL_OM_MANUAL_MASSIVE_FILESTAGE_DETAILS=SELECT * FROM oandm_file_stage where autobatchrun_id=?
GET_ALL_OM_MANUAL_MASSIVE_ERROR_DATA=SELECT * FROM oandm_error_log where uploaded_by = ?

GET_COUNT_FINDING_DUPLICATE_DATA = select count(*) from f_finding_cat where finding=?

GET_COUNT_ZONE_DUPLICATE_DATA = select count(*) from f_zone_cat where zone=?

GET_COUNT_MANUAL_DUPLICATE_DATA = select count(*) from f_manual_type where manual_type=?

GET_MAX_MANUAL_ID = select max(manual_id) from f_manual_type

ADD_OM_Manual_ID = INSERT INTO f_manual_type (manual_id,manual_type) VALUES (?,?)


#GET_GIB_DATA=SELECT * FROM g_gib
 
 

GET_GIB_DATA=select * from (select null gib_autoincrement,a.GLOBAL_CUSTOMER_NAME  ,a.DOMESTIC_CUSTOMER_NAME             ,a.REGIONAL_CUSTOMER_NAME             ,a.SITE_CUSTOMER          ,a.STATION          ,a.UNIT_NUM    ,a.GE_SN              ,a.NAMEPLATE_SN           ,a.RELATED_SN  ,a.ENGINE_SN_AERO      ,a.EQUIPCODE    ,a.GEN_MODEL  ,a.UNIT_STATUS                ,a.NON_OEM_SERIAL_NUMBER non_oem_materials      ,a.SERV_RELATIONSHIP  ,TO_CHAR(a.PKG_SHIP_DATE,'yyyy-mm-dd') PKG_SHIP_DATE   ,TO_CHAR(a.PKG_FIRST_FIRE,'yyyy-mm-dd') PKG_FIRST_FIRE    ,TO_CHAR(a.PKG_COD,'yyyy-mm-dd')  PKG_COD             ,TO_CHAR(a.RETIRE_DATE,'yyyy-mm-dd')  RETIRE_DATE                ,a.MANUF_LOCATION    ,a.DUTY_CYCLE   ,a.CYCLE_TYPE    ,a.STAG ,a.INDUSTRY        ,a.SEGMENT        ,a.DRIVEN_EQUIPMENT ,a.ENVIRONMENT             ,a.MANNED         ,a.LOCATION       ,a.CONTROL_SYS               ,a.SEQUENCER_HARDWARE         ,a.CORE_SOFTWARE_BLOCK        ,a.BLACK_START                ,a.PRIMARY_INLET_CONDITIONING         ,a.SECONDARY_INLET_CONDITIONING   ,a.PRIMARY_INLET_HEATING      ,a.SECONDARY_INLET_HEATING                ,a.PRIMARY_FUEL             ,a.SECONDARY_FUEL       ,TO_CHAR(a.ESN_SHIPPED,'yyyy-mm-dd')  ESN_SHIPPED              ,decode(a.RATING,'NULL',NULL,a.RATING) rating             ,a.RATING_UNIT               ,a.COMBUSTION_SYS      ,a.NOX_DILUENT               ,a.NOX_LEVEL_PPM        ,a.POWER_AUGMENTATION       ,a.GENERATOR_MANUF_LOCATION        ,a.GENERATOR_EQUIP_CODE     ,a.GENERATOR_EQUIP_MODEL  ,a.GENERATOR_SN           ,a.SO_EQUIP_JOB_NUM               ,a.CUSTOMER_FACING_NUM     ,a.OFFICE_NAME              ,a.SERV_REGION               ,a.SERV_MGR_LAST         ,a.SERV_MGR_FIRST       ,a.INST_DIR_CSM_LAST ,a.INST_DIR_CSM_FIRST                ,a.CSA_SITE_MGR_LAST                ,a.CSA_SITE_MGR_FIRST               ,a.ACCT_MGR_LAST_TESTING    ,a.ACCT_MGR_FIRST_TESTING   ,a.ES_GEPS_REGION       ,a.OG_REGION   ,a.SALES_CHANNEL          ,a.ADDRESS          ,a.CITY    ,a.STATE                ,a.POSTAL_CODE               ,a.COUNTRY        ,a.PHONE              ,a.GLOB_DUNS  ,a.DOM_DUNS   ,a.REG_DUNS     ,a.SITE_DUNS     ,a.SANCTIONED ,TO_CHAR(a.DATA_VERIFIED,'yyyy-mm-dd') DATA_VERIFIED      ,a.COMMENTS   ,b.LATITUDE latitude       ,b.LONGITUDE longitude               ,a.IGV     ,to_char(d.ENGINE_FIRST_FIRE_DATE,'yyyy-mm-dd') esn_1st_fire           ,c.esn cmu_esn  ,       a.LEASE_PROGRAM_MEMBER ,      a.SPARE_ENGINE_OWNER   ,a.REMOTE_MONITORING_UNIT_NAME,a.OUTAGE_MGR_LAST,a.OUTAGE_MGR_FIRST,TO_CHAR(a.LAST_LOADED_DATE,'yyyy-mm-dd') LAST_LOADED_DATE,a.NON_OEM_SERIAL_NUMBER,a.CONTROL_OEM,a.CONTROL_TYPE,a.CONTROL_SO_NO,a.CONTROL_ITEM_NO,a.CONTROL_SYSTEM_NEW,a.CORE_CONTROL_SOFTWARE_VERSION,a.OSM,a.QRC,a.GRBX,a.GRBXM,a.GRBXS,a.CLU,a.CLUM,a.CLUS,a.ENGPACKTYPE,a.ACCT_MGR_FIRST_NAME,a.ACCT_MGR_LAST_NAME,a.ACCT_MGR_EMAIL,a.SERV_MGR_EMAIL,a.CPM_EMAIL,a.LAST_MODIFIED_BY,to_char(a.LAST_MODIFIED_DATE,'yyyy-mm-dd') LAST_MODIFIED_DATE,c.UPRATE ,rownum rn from  SIIP.aero_extract_stg a,   SIIP.customer_stg b,SIIP.CMU_SCHEDULE           c, SIIP.EQUIP_AERO_DERIVATIVE_STG  D where a.site_duns=b.DUNS_NUMBER(+) and a.ENGINE_SN_AERO=c.ESN(+) and a.ge_sn=d.equip_serial_number(+) ) a where  a.rn > ? and rownum <101 order by a.rn   

GET_GIB_TOTAL_RECORDS=select count(*) from  SIIP.aero_extract_stg a,   SIIP.customer_stg b,SIIP.CMU_SCHEDULE           c, SIIP.EQUIP_AERO_DERIVATIVE_STG  D where a.site_duns=b.DUNS_NUMBER(+)and a.ENGINE_SN_AERO=c.ESN(+)and a.ge_sn=d.equip_serial_number(+)

ADD_GIB_DATA=INSERT INTO g_gib_stag (global_customer_name,domestic_customer_name,regional_customer_name,site_customer,station,unit_number,gesn,nameplate_esn,relatedsn,engine_sn_aero,equip_code,gen_model,unit_status,non_oem_materials,serv_relationship,pkg_ship_date,pkg_first_fire,pkg_code,retire_date,mfg_location,duty_cycle,cycle_type,stag,industry,segment,driven_equipment,enviroment,manned,location,control_sys,sequencer_hw,core_sw_block,black_start,primary_inlet_conditioning,secondary_inlet_conditioning,primary_inlet_heating,secondary_inlet_heating,primary_fuel,secondary_fuel,esn_shipped,rating,rating_unit,combustion_sys,nox_diluent,nox_level_ppm,power_augmentation,gen_mfg_location,gen_equip_code,gen_equip_model,gen_sn,so_equip_job_num,customer_facing_num,office_name,serv_region,serv_mgr_last,serv_mgr_first,inst_dir_csm_last,inst_dir_csm_first,csa_site_mgr_last,csa_site_mgr_first,acct_mgr_last_testing,acct_mgr_first_testing,es_geps_region,og_region,sales_channel,address,city,state,postal_code,country,phone,globe_duns,dom_duns,reg_duns,site_duns,sanctioned,data_verified,comments,latitude,longitude,igv,esn_1st_fire,cmu_esn,LEASE_PROGRAM_MEMBER,SPARE_ENGINE_OWNER,RMD_UNIT_NAME,outage_mgr_last,outage_mgr_first,last_loaded_date,non_oem_serial_number,control_oem,control_type,control_so_no,control_item_no,control_system_new,core_control_software_version,osm,qrc,grbx,grbxm,grbxs,clu,clum,clus,engpacktype,acct_mgr_first_name,acc_mgr_last_name,acct_mgr_email,serv_mgr_email,cpm_email,last_modified_by,last_modified_date,uprate,batch_date) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,now())


VIEW_FINAL_GIB_DATA=SELECT * FROM g_gib


GET_GIB_FILTER_RECORD_COUNT=SELECT * FROM g_gib where engine_sn_aero like ? or unit_status like ?  or   global_customer_name like ? or  duty_cycle like ? or serv_relationship like ? or gesn like ? or    nameplate_esn like ? or    gen_equip_model like ? or    station like ? or    equip_code like ? or    combustion_sys like ? or    primary_fuel like ? or    nox_diluent like ? or    power_augmentation like ? or    industry like ? or    segment like ? or    enviroment like ? or    driven_equipment like ? or    cmu_esn like ?


DELETE_GIB_STAG_DATA=delete from g_gib_stag

GET_LAST_MONTH_DETAILS=select  a.esn,b.event_number, c.event_cat, a.start_date, a.esn_tsn tsn,a.fin_create_user  from    c_final_esn_tsn a, c_eng_event b ,  c_event_cat c where a.final_true_tsn_id=b.final_true_tsn_id and b.event_cat_id=c.event_cat_id and month(a.start_date) =month(now())-1 and a.fin_create_user=? order by a.esn,b.event_number,a.start_date  desc

GET_LAST_MONTH_DETAILS_UPDATE =select    a.esn, b.event_number, c.event_cat, a.start_date, a.esn_tsn tsn,a.fin_create_user  from     c_final_esn_tsn a, c_eng_event b ,  c_event_cat c where a.final_true_tsn_id=b.final_true_tsn_id and b.event_cat_id=c.event_cat_id and month(a.start_date) =month(now())-1 and a.updated_by=? order by a.esn,b.event_number,a.start_date  desc


GET_FLEET_UTILIZATION_DATA=SELECT \
						    a.esn,\
						    b.event_number,\
						    c.event_cat,\
						    a.start_date,\
						    a.esn_tsn tsn,\
						    a.fin_create_user,\
						    f.model_desc,\
						    unplan_plan,\
						    field_depot_office,\
						    in_out_package,\
						    event_type_id as event_type,\
						    bus_code_id as bus_type,\
						    main_concern  \
						FROM \
						    (SELECT \
						        final_true_tsn_id,\
						            esn,\
						            start_date,\
						            esn_tsn,\
						            fin_create_user,\
						            updated_by  \
						    FROM  \
						        c_final_esn_tsn \
						    WHERE \
						        CAST(start_date AS DATE) >= CAST(DATE_ADD(now(), INTERVAL - ? MONTH) AS DATE)  AND CAST(start_date AS DATE) <= CAST(now() AS DATE)) a, \
						    c_eng_event b, \
						    c_event_cat c, \
						    g_gib d, \
						    trans_gib_model e, \
						    i_model f \
						WHERE \
						    a.final_true_tsn_id = b.final_true_tsn_id \
						        AND a.esn = d.engine_sn_aero \
						        AND  if(d.equip_code is null,'',d.equip_code)= e.equip_code \
						        AND if(d.gen_model is null,'',d.gen_model) = e.gen_model \
						        AND e.model_id = f.model_id \
						        AND a.updated_by = ?  UNION all \
						SELECT \
						    a.esn,\
						    b.event_number,\
						    c.event_cat,\
						    a.start_date, \
						    a.esn_tsn tsn,\
						    a.fin_create_user,\
						    f.model_desc,\
						    unplan_plan,\
						    field_depot_office,\
						    in_out_package,\
						    event_type_id as event_type,\
						    bus_code_id as bus_type,\
						    main_concern  \
						FROM \
						    (SELECT  \
						        final_true_tsn_id,\
						            esn,\
						            start_date,\
						            esn_tsn,\
						            fin_create_user,\
						            updated_by \
						    FROM \
						        c_final_esn_tsn \
						    WHERE \
						        CAST(start_date AS DATE) >= CAST(DATE_ADD(now(), INTERVAL - ? MONTH) AS DATE)   AND CAST(start_date AS DATE) <= CAST(now() AS DATE)) a, \
						    c_eng_event b, \
						    c_event_cat c, \
						    g_gib d, \
						    trans_gib_model e, \
						    i_model f \
						WHERE \
						    a.final_true_tsn_id = b.final_true_tsn_id \
						        AND b.event_cat_id = c.event_cat_id \
						        AND a.esn = d.engine_sn_aero \
						        AND  if(d.equip_code is null,'',d.equip_code)= e.equip_code \
						        AND if(d.gen_model is null,'',d.gen_model) = e.gen_model \
						        AND  e.model_id  = f.model_id \
						        AND a.fin_create_user = ?   


GET_FLEET_UTILIZATION=select esn,tsn,qtr from (select a.esn,round(sum(a.esn_tsn),2) tsn, \
						concat(cast(year(a.start_date) as character) ,'-', \
						case when cast(quarter(a.start_date) as character) =1 and cast(monthname(a.start_date) as character)='January' then 'JAN' \
							 when cast(quarter(a.start_date) as character) =1 and cast(monthname(a.start_date) as character)='February' then 'FEB' \
							 when cast(quarter(a.start_date) as character) =1 and cast(monthname(a.start_date) as character)='March'  then  'MAR' \
							 when cast(quarter(a.start_date) as character) =2 and cast(monthname(a.start_date) as character)='April'  then 'APR' \
							 when cast(quarter(a.start_date) as character) =2 and cast(monthname(a.start_date) as character)='May'  then 'MAY' \
							 when cast(quarter(a.start_date) as character) =2 and cast(monthname(a.start_date) as character)='June'  then 'JUN' \
							 when cast(quarter(a.start_date) as character) =3 and cast(monthname(a.start_date) as character)='July'  then 'JUL' \
							 when cast(quarter(a.start_date) as character) =3 and cast(monthname(a.start_date) as character)='August'  then 'AUG' \
							 when cast(quarter(a.start_date) as character) =3 and cast(monthname(a.start_date) as character)='September'  then 'SEP' \
							 when cast(quarter(a.start_date) as character) =4  and cast(monthname(a.start_date) as character)='October' then 'OCT' \
							 when cast(quarter(a.start_date) as character) =4 and cast(monthname(a.start_date) as character)='November'  then 'NOV' \
							 when cast(quarter(a.start_date) as character) =4 and cast(monthname(a.start_date) as character)='December'  then 'DEC' \
						ELSE 'NA' END ) qtr, \
						cast(concat(cast(year(a.start_date) as UNSIGNED), \
						case when cast(quarter(a.start_date) as character) =1 and cast(monthname(a.start_date) as character)='January' then 1 \
							 when cast(quarter(a.start_date) as character) =1 and cast(monthname(a.start_date) as character)='February' then 2 \
							 when cast(quarter(a.start_date) as character) =1 and cast(monthname(a.start_date) as character)='March'  then 3 \
							 when cast(quarter(a.start_date) as character) =2 and cast(monthname(a.start_date) as character)='April'  then 4 \
							 when cast(quarter(a.start_date) as character) =2 and cast(monthname(a.start_date) as character)='May'  then 5 \
							 when cast(quarter(a.start_date) as character) =2 and cast(monthname(a.start_date) as character)='June'  then 6 \
							 when cast(quarter(a.start_date) as character) =3 and cast(monthname(a.start_date) as character)='July'  then 7 \
							 when cast(quarter(a.start_date) as character) =3 and cast(monthname(a.start_date) as character)='August'  then 8 \
							 when cast(quarter(a.start_date) as character) =3 and cast(monthname(a.start_date) as character)='September'  then 9 \
							 when cast(quarter(a.start_date) as character) =4  and cast(monthname(a.start_date) as character)='October' then 10 \
							 when cast(quarter(a.start_date) as character) =4 and cast(monthname(a.start_date) as character)='November'  then 11 \
							 when cast(quarter(a.start_date) as character) =4 and cast(monthname(a.start_date) as character)='December'  then 12 \
					  ELSE 'NA' END )as UNSIGNED) qtr1 \
					  from   c_final_esn_tsn a where   cast(a.start_date as date)  >=cast(DATE_ADD(now(), INTERVAL -? month) as date) and  cast(a.start_date as date)  <=cast(now() as date) \
					  group by a.esn,concat(cast(year(a.start_date) as character) ,'-',cast(quarter(a.start_date) as character)))a  order by qtr1 asc,tsn



GET_USER_ROLE_LIST=select role_id,role_name from user_roles



GET_USER_DETAILS=select sso, first_name, last_name,email, is_active, country, u.role_id,role_name,can_read,can_write, can_delete,can_lock, u.created_date  from users u, user_roles r where u.role_id = r.role_id and u.sso=?

GET_USERS_DETAILS=select sso, first_name, last_name,email, is_active, country, u.role_id,role_name,can_read,can_write, can_delete,can_lock, u.created_date  from users u, user_roles r where u.role_id = r.role_id
INSERT_USER_DETAILS=INSERT INTO users (sso,first_name,last_name,role_id,created_by,created_date,is_active,email, country) VALUES (?,?,?,?,?,now(),?,?,?)

DELETE_USER_DETAILS=update users set is_active='N' where sso=?
DEACTIVATE_USER_DETAILS = update users set is_active='N' where sso=?
ACTIVATE_USER_DETAILS = update users set is_active='Y' where sso=?


EDIT_USER_DETAILS=UPDATE users SET first_name = ?,last_name =?,role_id = ?,updated_by = ?,updated_date = now(),is_active =?,email =?, country=? WHERE sso =?

GET_DUPLICATE_SSOID=select count(sso) from users where sso=?

GET_USER_ROLE_NAME=SELECT role_name FROM user_roles where role_id=?


GET_COST_OF_OWNERSHIP = select count(a.esn) fleet ,\                          case when b.event_cat_id=1 then 'BSI' \                               when b.event_cat_id in (2,3) then 'ATR HSE/OH ' \                               when b.event_cat_id in (13,15) then 'OH/HS' \                               when b.event_cat_id in (17,18) then 'INS/REM' \                               when b.event_cat_id in (22,49,16) then 'REPAIR' \                               when b.event_cat_id=45 then 'ALARM /TRIP' \                          else null end category \ 						 from c_final_esn_tsn a ,c_eng_event b \ 						      where a.final_true_tsn_id=b.final_true_tsn_id \ 						      and b.event_cat_id in (1,2,3,13,15,17,18,22,49,16,45) group by case when b.event_cat_id=1 then 'BSI' \                               when b.event_cat_id in (2,3) then 'ATR HSE/OH  ' \                               when b.event_cat_id in (13,15) then 'OH/HS' \                               when b.event_cat_id in (17,18) then 'INS/REM' \                               when b.event_cat_id in (22,49,16) then 'REPAIR' \                               when b.event_cat_id=45 then 'ALARM /TRIP' \                          else null end

GET_ALL_PAC_CASE=select servnow_cases_id, case_number, equipment_code ,source,created_in_source_sys,date_pulled,owner,gesn,product_line,esn,title,description,submitted_by,case_complition_date_in_elite, date_put_into_fleet,case_cat,(select lov_description from c_lov_tbl WHERE lov_code='EXT_EVENT_CODE'  and lov_value=case_cat) hsOhLLPTpName,file_status,(select lov_description from c_lov_tbl WHERE lov_code='EXT_FILE_CODE'  and lov_value=file_status) fileDamagedName,applicable,unauth_hrdwre_installed,case_owner_sso,(select concat( first_name,' ', last_name) from users where sso =case_owner_sso) ownerBy,case_status,case_exist_flag,week(date_pulled)+1 week,dys_to_procss_in_elite,hig_tm_dys_to_procss_in_elite, dys_to_procss_in_fleet,hig_tm_dys_to_procss_in_fleet,u_url,u_engine_starts,u_engine_hours,case_owned_date,case_modified_date, case_modified_user, last_modify_user_name,case_fault_comment,case_owner_comments,revision,file_pointer,file_name,customer from s_external_src_cases
GET_ALL_FILEATTACHEMENT_ENOVIA=SELECT * FROM s_external_src_file_attachment
GET_OWNERSHIP_PAC_CASE=select servnow_cases_id, equipment_code, case_number ,source,created_in_source_sys,date_pulled,owner,gesn,product_line,esn,title,description,submitted_by,case_complition_date_in_elite, date_put_into_fleet,case_cat,(select lov_description from c_lov_tbl WHERE lov_code='EXT_EVENT_CODE'  and lov_value=case_cat) hsOhLLPTpName,file_status,(select lov_description from c_lov_tbl WHERE lov_code='EXT_FILE_CODE'  and lov_value=file_status) fileDamagedName,applicable,unauth_hrdwre_installed,case_owner_sso,(select concat( first_name,' ', last_name) from users where sso =case_owner_sso) ownerBy,case_status,case_exist_flag,week(date_pulled)+1 week, dys_to_procss_in_elite,hig_tm_dys_to_procss_in_elite,  dys_to_procss_in_fleet,hig_tm_dys_to_procss_in_fleet,u_url,u_engine_starts,u_engine_hours,case_owned_date,case_modified_date, case_modified_user, last_modify_user_name,case_fault_comment,case_owner_comments,revision,file_pointer,file_name,customer from s_external_src_cases where case_owner_sso=?
GET_PRODECT_LINE=select distinct prod_line product_line from i_product_line
GET_SERVICENOW_CASEID=SELECT case_number FROM s_external_src_cases where source = 'CUSTOM' 
GET_SOURCE=select distinct lov_value source from c_lov_tbl WHERE lov_code='EXT_SOURCES_CODE'  order by seq_order
PAC_CASE_TAKE_OWNERSHIP=update s_external_src_cases set case_owner_sso=?, case_modified_user = ?, case_status ='I', case_exist_flag='N' where servnow_cases_id=?
RELEASE_TAKE_OWNERSHIP=update s_external_src_cases set  case_status ='A',case_owner_sso=null where servnow_cases_id=?
PAC_CASE_COMPLETED=update s_external_src_cases set  case_status ='F',case_exist_flag='N',case_modified_date = now(),case_complition_date_in_elite= STR_TO_DATE(?,'%m-%d-%Y') where servnow_cases_id=?
EDIT_PAC_CASE=select servnow_cases_id, equipment_code, case_number ,source,created_in_source_sys,date_pulled,owner,gesn,product_line,esn,title,description,submitted_by,case_complition_date_in_elite, date_put_into_fleet,case_cat,(select lov_description from c_lov_tbl WHERE lov_code='EXT_EVENT_CODE'  and lov_value=case_cat) hsOhLLPTpName,file_status,(select lov_description from c_lov_tbl WHERE lov_code='EXT_FILE_CODE'  and lov_value=file_status) fileDamagedName,applicable,unauth_hrdwre_installed,case_owner_sso,(select concat( first_name,' ', last_name) from users where sso =case_owner_sso) ownerBy,case_status,case_exist_flag,week(date_pulled)+1 week, dys_to_procss_in_elite,hig_tm_dys_to_procss_in_elite, dys_to_procss_in_fleet,hig_tm_dys_to_procss_in_fleet,u_url,u_engine_starts,u_engine_hours,case_owned_date,case_modified_date, case_modified_user, last_modify_user_name,case_fault_comment,case_owner_comments,revision,file_pointer,file_name,customer from s_external_src_cases where servnow_cases_id=?
GET_USER_FULL_NAME=select concat( first_name,' ', last_name) ownerBy from users where sso =? 
ADD_NEW_PAC_CASE_CUSTOM=INSERT INTO  s_external_src_cases (case_number, source, created_in_source_sys, date_pulled, gesn, product_line, esn, title, description, submitted_by, unauth_hrdwre_installed ) VALUES (?,?,STR_TO_DATE(?,'%m-%d-%Y'),STR_TO_DATE(?,'%m-%d-%Y'),?,?,?,?,?,?,?)
SAVE_PAC_CASE=update s_external_src_cases set applicable=?,file_status=?, case_cat=?,case_owner_comments=?,unauth_hrdwre_installed=?, product_line=?,case_number=?,source=?, owner=?, gesn=?, esn=?, title=?, description=?,submitted_by=?, case_exist_flag='N',case_modified_date = now(), case_status =?, date_put_into_fleet=STR_TO_DATE(?,'%m-%d-%Y'),case_complition_date_in_elite=STR_TO_DATE(?,'%m-%d-%Y'),dys_to_procss_in_elite=?,hig_tm_dys_to_procss_in_elite=?,dys_to_procss_in_fleet=?,hig_tm_dys_to_procss_in_fleet=?, case_modified_user = ?, last_modify_user_name=? where servnow_cases_id=?
GET_FILE_DAMAGE=select  lov_value fileDamaged,lov_description fileDamagedVal from c_lov_tbl WHERE lov_code='EXT_FILE_CODE'  order by seq_order
GET_FSFFBSI_TYPE=select  lov_value hsOhLLPTp,lov_description hsOhLLPTpName from c_lov_tbl WHERE lov_code='EXT_EVENT_CODE'  order by seq_order
GET_SUBMIT_PAC_ENOVIA=select  lov_description submittedBy from c_lov_tbl WHERE lov_code='EXT_PAC_ENOVIA'  order by seq_order
COMPLETE_ELITE_PAC_CASE=update s_external_src_cases set applicable=?,file_status=?, case_cat=?,case_owner_comments=?,unauth_hrdwre_installed=?, product_line=?,case_number=?,source=?, owner=?, gesn=?, esn=?, title=?, description=?,submitted_by=?, case_exist_flag='N',case_modified_date = now(), case_status =?, date_put_into_fleet=STR_TO_DATE(?,'%m-%d-%Y'),case_complition_date_in_elite=STR_TO_DATE(?,'%m-%d-%Y'),dys_to_procss_in_elite=?,hig_tm_dys_to_procss_in_elite=?,dys_to_procss_in_fleet=?,hig_tm_dys_to_procss_in_fleet=?, case_modified_user = ?, last_modify_user_name=? where servnow_cases_id=?
COMPLETE_FLEET_PAC_CASE=update s_external_src_cases set applicable=?,file_status=?, case_cat=?,case_owner_comments=?,unauth_hrdwre_installed=?, product_line=?,case_number=?,source=?, owner=?, gesn=?, esn=?, title=?, description=?,submitted_by=?, case_exist_flag='N',case_modified_date = now(), case_status =?, date_put_into_fleet=STR_TO_DATE(?,'%m-%d-%Y'),case_complition_date_in_elite=STR_TO_DATE(?,'%m-%d-%Y'),dys_to_procss_in_elite=?,hig_tm_dys_to_procss_in_elite=?,dys_to_procss_in_fleet=?,hig_tm_dys_to_procss_in_fleet=?, case_modified_user = ?, last_modify_user_name=? where servnow_cases_id=?
INSERT_IPB_DATA= INSERT INTO ipb_file_stage (rec_id,fig) VALUES(?,?)
INSERT_IPB_FILE_META_DATA=INSERT INTO ipb_file_stage (file_name, model, total_records_count, inserted_records_count, updated_records_count, uploaded_by, uploaded_date,status) VALUES (?,?,?,0,0,?,?,'P')
GET_DELETE_AUTO_BATCH_RUN=select   autobatchrun_id  from   ipb_file_stage where file_name=? and model=?
DELETE_IPB_FILE_META_DATA=DELETE FROM ipb_file_stage where autobatchrun_id=?
GET_MAX_AUTO_BATCH_RUN=select max(autobatchrun_id) from ipb_file_stage where file_name=? and model=?
INSERT_IPB_FILE_DATA=INSERT INTO ipb_file_detail_stage ( autobatchrun_id, fig, major_assemblies, part_number, ppn, level_of_indent, nomenclature, eite_nomenclature, cage, vin, hazardous_material, comments, quantity, use_on_code, note,regulated_materials) VALUES (?,?,?,TRIM(?),TRIM(?),TRIM(?),TRIM(?),TRIM(?),?,?,?,TRIM(?),TRIM(?),?,TRIM(?),?)
VIEW_IPB_FILE_DATA= select  autobatchrun_id, fig, major_assemblies, part_number, ppn, level_of_indent, nomenclature, eite_nomenclature, cage, vin, hazardous_material, comments, quantity, use_on_code, note, insert_update, ipb_id,product_line,model model_id,(select model_desc from i_model where model_id=model) model,track,llp,regulated_materials from ipb_file_detail_stage where autobatchrun_id=?
DELETE_IPB_FILE_DATA=DELETE FROM ipb_file_detail_stage where autobatchrun_id=?
#VIEW_APPROVE_REJECT_IPB_DATA=SELECT `autobatchrun_id`,     `file_name`,     `model`,     `total_records_count`,     `inserted_records_count`,     `updated_records_count`,     `uploaded_by`,     `uploaded_date`,     `status`,date_approved , approved_by,upload_status,error_msg FROM ipb_file_stage  order by autobatchrun_id desc
VIEW_APPROVE_REJECT_IPB_DATA=select  `autobatchrun_id`,     `file_name`,     `model`,     `total_records_count`,     `inserted_records_count`,     `updated_records_count`,     `uploaded_by`,    `uploaded_date`, `status`, date_approved ,  approved_by, upload_status,error_msg from ( SELECT `autobatchrun_id`,     `file_name`,     `model`,     `total_records_count`,     `inserted_records_count`,     `updated_records_count`,     `uploaded_by`,     `uploaded_date`, `status`,    if(if(if( `status`='P','3'  ,`status`)='A','2', `status`)='R','1',`status`) `status1`, date_approved ,  approved_by, upload_status,error_msg  FROM ipb_file_stage  ) a order by status1 desc, model desc
UPDATE_IPB_APRROVE_ERROR_MSG=update ipb_file_stage set error_msg=? where autobatchrun_id=?
CHECK_EDITABLE_IPBNOMENCLATURE=SELECT count(pn) FROM f_compo_q_pn where is_deleted='N' and pn=?
#GET_MODEL_FILE_NAME=select distinct a.ipb_model_desc model,a.model_id model_id from     i_model a,  (select  engine_program,suffix,manual_gek from ipb_gek_reference where manual_type IN ('IPB','O&M ','IPB (Accessories) ') )b where a.ipb_model_desc= concat(b.engine_program ,' ',b.suffix) and b.manual_gek=?
GET_MODEL_FILE_NAME=select a.model_desc model,a.model_id model_id from  i_model a, ipb_gek_reference b where a.model_id=b.model_id and  b.manual_gek=? and  b.manual_type IN ('IPB','O&M ','IPB (Accessories) ')
REJECT_IPB_FILE_DATA=update  ipb_file_stage set status='R', approved_by=?,date_approved=now() where autobatchrun_id=?
#GET_IPB_PRODECT_LINE=select distinct ipb_prod_line product_line from i_product_line where ipb_prod_line is not null order by ipb_prod_line
GET_IPB_PRODECT_LINE=select prod_line product_line from i_product_line where prod_line is not null order by prod_line
#GET_IPB_MODEL=select distinct a.ipb_model_desc model,a.model_id  model_id  from   i_model a,  (select  engine_program,suffix from ipb_gek_reference where manual_type IN ('IPB','O&M ','IPB (Accessories) ') )b where a.ipb_model_desc= concat(b.engine_program ,' ',b.suffix) and b.engine_program =? order by a.ipb_model_desc
GET_IPB_MODEL=select distinct a.model_desc model,a.model_id model_id from  i_model a,  trans_gib_model b,i_product_line c where a.model_id=b.model_id and  b.prod_line_id=c.prod_line_id and c.prod_line  =?
GET_IPB_COMPONENT=select distinct a.description component from i_desc  a, i_pn_desc b, i_ipb c where a.desc_id=b.desc_id and b.part_number=c.part_number and a.description is not null and c.model_id=? order by a.description
GET_SUGGESTED_ELITENOMLIST=SELECT DISTINCT a.desc_id desc_id, a.description component FROM (SELECT DISTINCT i_desc.desc_id AS desc_id, i_desc.description AS description, i_pn_desc.part_number FROM i_desc LEFT JOIN (SELECT part_number, desc_id FROM i_pn_desc WHERE part_number IN (SELECT part_number FROM i_ipb WHERE ipb_valid_rec = 'Y' AND model_id = ?)) i_pn_desc ON i_pn_desc.desc_id = i_desc.desc_id WHERE i_desc.description IS NOT NULL GROUP BY i_desc.desc_id) a LEFT JOIN (SELECT i_desc.desc_id AS desc_id, i_desc.description AS description_, i_pn_desc.part_number, i_ipb.model_id FROM i_desc, i_pn_desc, i_ipb, ipb_gek_reference WHERE i_desc.description IS NOT NULL AND i_pn_desc.desc_id = i_desc.desc_id AND i_ipb.part_number = i_pn_desc.part_number AND ipb_gek_reference.model_id = i_ipb.model_id AND ipb_gek_reference.model_id = ?) b ON a.desc_id = b.desc_id ORDER BY description
UPDATE_ELITENOMENCLATURE_IPB=update i_pn_desc set desc_id = ? where part_number = ?
GET_IPB_FILE_COMPONENT=select distinct case when eite_nomenclature ='' then   nomenclature   when eite_nomenclature is null then   nomenclature  else eite_nomenclature   end component  from ipb_file_detail_stage where autobatchrun_id=? ORDER   BY  CASE WHEN eite_nomenclature ='' then nomenclature    ELSE eite_nomenclature   END
VIEW_IPB_MASTER_FILE_DATA=select a.autobatchrun_id , '' regulated_materials,	a.figure_list fig, 	a.idx major_assemblies, 	a.part_number, 	a.ppn, 	a.indent_level level_of_indent, 	'' nomenclature , 	c.description eite_nomenclature, 	b.desc_id, 	a.cage, 	a.vin, (select hazardous_desc from i_hazard where hazard_id=a.hazard_id) hazardous_material,  a.comments, a.qpe quantity, a.use_on_code, a.note, a.model_id, (select distinct  d.engine_program from    i_model m,  (select * from ipb_gek_reference where manual_type IN ('IPB','O&M ','IPB (Accessories) ') )d where m.model_id= a.model_id and  m.ipb_model_desc= concat(d.engine_program ,' ',d.suffix)) product_line , (select ipb_model_desc from i_model where model_id = a.model_id) model ,c.track,c.llp  from i_ipb a join i_pn_desc b on  a.part_number=b.part_number join i_desc c on b.desc_id=c.desc_id  and a.autobatchrun_id is not null
#VIEW_IPB_APPROVED_FILE_DATA=select a.autobatchrun_id , '' regulated_materials,	a.figure_list fig, 	a.idx major_assemblies, 	a.part_number, 	a.ppn, 	a.indent_level level_of_indent, '' nomenclature, 	c.description eite_nomenclature , 	b.desc_id, 	a.cage, 	a.vin,(select hazardous_desc from i_hazard where hazard_id=a.hazard_id) hazardous_material, 	a.comments, 	a.qpe quantity, 	a.use_on_code, 	a.note, 	a.model_id, 	(select distinct  d.engine_program from    i_model m,  	(select * from ipb_gek_reference 	where manual_type IN ('IPB','O&M ','IPB (Accessories) ') )d 	where m.model_id= a.model_id         and  m.ipb_model_desc= concat(d.engine_program ,' ',d.suffix)) product_line ,        (select ipb_model_desc from i_model where model_id=a.model_id) model,        c.track,   c.llp  from i_ipb a join i_pn_desc b on  a.part_number=b.part_number join i_desc c on b.desc_id=c.desc_id where a.autobatchrun_id=?
VIEW_IPB_APPROVED_FILE_DATA=select    a.autobatchrun_id , '' regulated_materials,a.figure_list fig, a.idx major_assemblies, a.part_number,a.ppn,a.indent_level level_of_indent,'' nomenclature, c.description eite_nomenclature ,     b.desc_id,      a.cage, a.vin, (select hazardous_desc from i_hazard where hazard_id=a.hazard_id) hazardous_material,              a.comments,    a.qpe quantity,       a.use_on_code,  a.note,    a.model_id,   (  select distinct c.prod_line from  i_model a1,  trans_gib_model b,  i_product_line c    where a1.model_id=b.model_id and  b.prod_line_id=c.prod_line_id  and  a1.model_id  =a.model_id) product_line ,                                                                                 (select model_desc from i_model where model_id=a.model_id) model,    c.track,    c.llp  from i_ipb a join i_pn_desc b on  a.part_number=b.part_number   join i_desc c on b.desc_id=c.desc_id where a.autobatchrun_id=?
#SEARCH_VIEW_IPB_FILE_DATA=select distinct a.autobatchrun_id , '' regulated_materials,	a.figure_list fig, 	a.idx major_assemblies, 	a.part_number, 	a.ppn, 	a.indent_level level_of_indent, 	'' nomenclature , 	c.description eite_nomenclature, 	b.desc_id, 	a.cage, 	a.vin, 	(select hazardous_desc from i_hazard where hazard_id=a.hazard_id) hazardous_material, 	a.comments, 	a.qpe quantity, 	a.use_on_code, 	a.note, 	a.model_id, 	(select distinct  d.engine_program from    i_model m, 	(select * from ipb_gek_reference 	where manual_type IN ('IPB','O&M ','IPB (Accessories) ') )d 	where m.model_id= a.model_id 	and  m.ipb_model_desc= concat(d.engine_program ,' ',d.suffix)) product_line , 	(select ipb_model_desc from i_model where model_id = a.model_id) model , 	c.track,c.llp  from i_ipb a join i_pn_desc b on  a.part_number=b.part_number join i_desc c on b.desc_id=c.desc_id join i_model d on a.model_id=d.model_id join  (select * from ipb_gek_reference where manual_type IN ('IPB','O&M ','IPB (Accessories) ') ) e on  d.ipb_model_desc= concat(e.engine_program ,' ',e.suffix)  and e.engine_program =? 
#SEARCH_VIEW_IPB_FILE_DATA=select distinct a.autobatchrun_id ,  '' regulated_materials,  a.figure_list fig,  a.idx major_assemblies,    a.part_number,  a.ppn,  a.indent_level level_of_indent,   '' nomenclature ,     c.description eite_nomenclature,     b.desc_id,   a.cage,   a.vin,     (select hazardous_desc from i_hazard where hazard_id=a.hazard_id) hazardous_material,  a.comments,    a.qpe quantity,  a.use_on_code,     a.note,      a.model_id,    (   select distinct c.prod_line from  i_model a1,  trans_gib_model b,  i_product_line c    where a1.model_id=b.model_id   and  b.prod_line_id=c.prod_line_id     and  a1.model_id  =a.model_id ) product_line ,  (select model_desc from i_model where model_id = a.model_id) model ,  c.track, c.llp  from i_ipb a join i_pn_desc b on  a.part_number=b.part_number  join i_desc c on b.desc_id=c.desc_id    join i_model d on a.model_id=d.model_id   join  (select * from ipb_gek_reference where manual_type IN ('IPB','O&M ','IPB (Accessories) ') ) e    on  d.model_desc= concat(e.engine_program ,' ',e.suffix)  and e.engine_program =?
SEARCH_VIEW_IPB_FILE_DATA=select distinct a.autobatchrun_id ,  '' regulated_materials,  a.figure_list fig,  a.idx major_assemblies,    a.part_number,  a.ppn,  a.indent_level level_of_indent,   '' nomenclature ,     c.description eite_nomenclature,     b.desc_id,   a.cage,   a.vin,     (select hazardous_desc from i_hazard where hazard_id=a.hazard_id) hazardous_material,  a.comments,    a.qpe quantity,  a.use_on_code,     a.note,      a.model_id,    (   select distinct c.prod_line from  i_model a1,  trans_gib_model b,  i_product_line c    where a1.model_id=b.model_id   and  b.prod_line_id=c.prod_line_id     and  a1.model_id  =a.model_id ) product_line ,  (select model_desc from i_model where model_id = a.model_id) model ,  c.track, c.llp  from i_ipb a join i_pn_desc b on  a.part_number=b.part_number  join i_desc c on b.desc_id=c.desc_id    join i_model d on a.model_id=d.model_id   where a.model_id=
SEARCH_VIEW_IPB_FILE_PART_NUMBER_OR_MODEL=  select distinct a.autobatchrun_id ,  '' regulated_materials,  a.figure_list fig,  a.idx major_assemblies,    a.part_number,  a.ppn,  a.indent_level level_of_indent,   '' nomenclature ,     c.description eite_nomenclature,     b.desc_id,   a.cage,   a.vin,     (select hazardous_desc from i_hazard where hazard_id=a.hazard_id) hazardous_material,  a.comments,    a.qpe quantity,  a.use_on_code,     a.note,      a.model_id,    '' product_line ,  (select model_desc from i_model where model_id = a.model_id) model ,  c.track, c.llp  from i_ipb a join i_pn_desc b on  a.part_number=b.part_number  join i_desc c on b.desc_id=c.desc_id    join i_model d on a.model_id=d.model_id   where a.part_number like
GET_PAC_CASE_COUNT=select Count(*) from s_external_src_cases where servnow_cases_id=?
DELETE_PAC_CASE_DATA=delete from s_external_src_cases where  servnow_cases_id=?

GET_EXIST_PIEL_DATA=select final_true_tsn_id,c_eng_tsn_id, esn , DATE_FORMAT(start_date,'%Y-%m-%d') AS start_date   ,  	 DATE_FORMAT(end_date,'%Y-%m-%d') AS end_date, 	 esn_tsn ,      validated_by,      esn_starts,	 	fin_create_user, 	fin_create_date 	from c_final_esn_tsn where esn=?
GET_EXIST_EVENT_DATA=SELECT final_true_tsn_id,event_id, c_eng_tsn_id, c_eng_event.event_type_id, event_type,                 event_number, main_concern, reason_for, c_eng_event.event_cat_id, event_cat,                 acronym,  case field_depot_office    when 'F' then 'Field'     when 'D' then 'Depot' when 'O' then 'Office'   end as field_depot_office, c_eng_event.bus_code_id, bus_name, case unplan_plan   when 'P' then 'Planned'  when 'U' then 'Unplanned'  end as unplan_plan,case in_out_package   when 'OP' then 'Out Pack'    when 'IP' then 'In Pack'  end as in_out_package  FROM c_eng_event   LEFT JOIN c_event_type ON c_eng_event.event_type_id = c_event_type.event_type_id                 LEFT JOIN c_event_cat ON c_eng_event.event_cat_id = c_event_cat.event_cat_id                 LEFT JOIN c_shop_code ON c_eng_event.bus_code_id = c_shop_code.bus_code_id                 WHERE is_deleted='N' AND final_true_tsn_id= ?
GET_EXIST_COMP_DATA=SELECT f_wo_compo.f_wo_compo_id, event_id, got_pics, description,             f_failure_rank.failure_rank_id, failure_rank_description, LEFT(description, 3) AS module,f_wo_compo.is_deleted, 			f_wo_compo.is_locked FROM f_wo_compo             LEFT JOIN i_desc ON f_wo_compo.desc_id = i_desc.desc_id             LEFT JOIN f_failure_rank ON f_failure_rank.failure_rank_id = f_wo_compo.failure_rank_id         	WHERE f_wo_compo.is_deleted='N' AND event_id = ? ORDER BY i_desc.order_no, i_desc.description ASC 
GET_EXIST_PART_DATA= SELECT f_wo_compo_id, f_compo_qpn_id, qty, pn,  serial_number_assy, compo_tsn, f_as_left.final_disposition_on_off as on_off,   CONCAT(as_found_desc, ' ', provided_by) AS as_found_desc,  CONCAT(correct_action, ' -> ', corr_action_detail) AS as_left,  if(serv_desc is not null, CONCAT(serv_desc, ' ', repa_desc), repa_desc) AS as_inspected, f_compo_q_pn.is_deleted, f_compo_q_pn.is_locked,   f_compo_q_pn.is_not_found     FROM f_compo_q_pn     LEFT JOIN f_as_found ON f_as_found.as_found_id = f_compo_q_pn.as_found_id     LEFT JOIN f_as_insp ON f_as_insp.as_inspected_id = f_compo_q_pn.as_inspected_id  LEFT JOIN f_serv_cat ON f_serv_cat.serviceable_id = f_as_insp.serviceable_id    LEFT JOIN f_repa_cat ON f_repa_cat.repairable_id = f_as_insp.repairable_id   LEFT JOIN f_as_left ON f_as_left.as_left_id = f_compo_q_pn.as_left_id    WHERE is_deleted='N' AND f_wo_compo_id = ?
INSERT_WEIBULL_REPORT_INFO=insert into weibull_report_info (query_name, full_query, created_by, selected_field_json, query_list_json, selected_field_name_order, order_condition, is_deleted) values (?,?,?,?,?,?,?, 'N')
GET_WEIBULL_REPORT_DATA=select * FROM weibull_report_info where is_deleted = 'N'
UPDATE_WEIBULL_REPORT_INFO=update weibull_report_info set query_name = ?, full_query = ?, updated_by = ?, selected_field_json = ?, query_list_json = ?, selected_field_name_order = ?, order_condition = ?, is_deleted=? where id = ?
INSERT_WEIBULL_REPORT_LOG=insert into weibull_report_log (created_by, report_name, requested_query, report_status, creation_date) values (?,?,?,'INPROGRESS',sysdate())
UPDATE_WEIBULL_REPORT_LOG=update weibull_report_log set report_url = ?, report_status = ?, exceptionlog = ? where report_name = ?
GET_WEIBULL_LOG_DATA=select * FROM weibull_report_log WHERE creation_date >= date_sub(now(), interval 3 month) and report_status!='DELETED' order by report_id desc
GET_WEIBULL_LOG_DATA_DELETELIST=select * FROM weibull_report_log where report_status!='DELETED' order by report_id asc

GET_ORAP_EBS_CODE=SELECT IFNULL(Equipment_code,' ') as 'Equipment Code', IFNULL(major_system,' ') as 'Major System', IFNULL(System,' ') as 'System', IFNULL(Component_Group,' ') as 'Component Group', IFNULL(Component,' ') as 'Component', IFNULL(DATE_FORMAT(Mod_Datetime, '%Y-%m-%d %k:%i:%S'),' ') as 'Mod Datetime' FROM orap_ebs_code_stg
GET_ORAP_COUNTER_READING=SELECT IFNULL(Unit_ID,' ') as 'Unit ID', IFNULL(Counters_ID,' ') as 'Counters ID', IFNULL(Design,' ') as 'Design', IFNULL(DATE_FORMAT(Begin_Date, '%Y-%m-%d %k:%i:%S'),' ') as 'Begin Date', CAST(IFNULL(Fired_Hours,' ') as char) as 'Fired Hours', CAST(IFNULL(Fired_Starts,' ')as char) as 'Fired Starts', CAST(IFNULL(Trip_count,' ')as char) as 'Trip Count', CAST(IFNULL(Total_Starts,' ')as char) as 'Total Starts', IFNULL(DATE_FORMAT(Mod_Datetime, '%Y-%m-%d %k:%i:%S'),' ') as 'Mod Datetime' FROM orap_counter_reading_stg
GET_ORAP_EVENTS=SELECT IFNULL(Unit_ID,' ') as 'UNIT ID', IFNULL(Event_ID,' ') as 'Event ID', IFNULL(Design,' ') as 'Design', IFNULL(DATE_FORMAT(Begin_Date, '%Y-%m-%d %k:%i:%S'),' ') as 'Begin Date', IFNULL(DATE_FORMAT(End_Date, '%Y-%m-%d %k:%i:%S'),' ') as 'End Date', IFNULL(Unit_ID,' ') as 'UNIT', CAST(IFNULL(Duration_Hours,' ')as char) as 'Duration Hours', CAST(IFNULL(MW_Loss,' ')as char) as 'MW Loss', IFNULL(Event_Type,' ') as 'Event Type', IFNULL(EBS_Code,' ') as 'EBS Code', IFNULL(ebs_code_description,' ') as 'EBS Code Description', IFNULL(Outage_Mechanism,' ') as 'Outage Mechanism', IFNULL(event_description,' ') as 'Event Description', IFNULL(Narrative,' ') as 'Narrative', IFNULL(DATE_FORMAT(Mod_Datetime, '%Y-%m-%d %k:%i:%S'),' ') as 'Mod Datetime', IFNULL(Event_Status,' ') as 'Event Status', IFNULL(Engine_Serial_Number,' ') as 'Engine Serial Number', IFNULL(Power_Turbine_Serial_Number,' ') as 'Power Turbine Serial Number' FROM orap_events_stg
GET_OARP_OPERATIONAL=SELECT IFNULL(Unit_ID,' ') as 'UNIT ID', IFNULL(Perf_ID,' ') as 'Perf ID', IFNULL(Design,' ') as 'Design', IFNULL(DATE_FORMAT(Begin_Date, '%Y-%m-%d %k:%i:%S'),' ') as 'Begin Date',  IFNULL(DATE_FORMAT(End_Date, '%Y-%m-%d %k:%i:%S'),' ')  as 'End Date', CAST(IFNULL(Period_Hours,' ') as char)as 'Period Hours', CAST(IFNULL(Service_Hours,' ') as char) as 'Service Hours', CAST(IFNULL(Reserve_Hours,' ') as char) as 'Reserve Hours', CAST(IFNULL(Unavailable_Hours,' ') as char) as 'Unavailable Hours', CAST(IFNULL(Attempted_Starts,' ') as char) as 'Attempted Starts', CAST(IFNULL(Successful_Starts,' ') as char) as 'Successful Starts', CAST(IFNULL(MWH_Production,' ') as char) as 'MWH Production', CAST(IFNULL(Nominal_Capacity,' ') as char) as 'Nominal Capacity', IFNULL(Engine_Serial_Number,' ') as 'Engine Serial Number', IFNULL(Power_Turbine_Serial_Number,' ') as 'Power Turbine Serial Number' FROM orap_operational_stg
GET_OARP_INFO=SELECT IFNULL(Unit_ID,' ') as 'UNIT ID', IFNULL(Serial_Number,' ') as 'Serial Number', IFNULL(Company,' ') as 'Company', IFNULL(Site,' ') as 'Site', IFNULL(Plant,' ') as 'Plant', IFNULL(Unit,' ') as 'UNIT', IFNULL(Design,' ') as 'Design', IFNULL(GT_Model,' ') as 'GT Model', IFNULL(ST_Model,' ') as 'ST Model', IFNULL(Country,' ') as 'Country', IFNULL(Duty_Cycle,' ') as 'Duty Cycle', IFNULL(Unit_Type,' ') as 'Unit Type', CAST(IFNULL(Nominal_MW_Rating,' ') as char ) as 'Nominal MW Rating', IFNULL(Primary_Fuel,' ') as 'Primary Fuel', IFNULL(Secondary_Fuel,' ') as 'Secondary Fuel' , IFNULL(DATE_FORMAT(Mod_Datetime, '%Y-%m-%d %k:%i:%S'),' ') as 'Mod Datetime' FROM orap_unit_info_stg
GET_ORAP_DELETE=select IFNULL(Record_type,' ') as 'Record Type', IFNULL(Record_Id,' ') as 'Record Id',IFNULL(DATE_FORMAT( Delete_date_time, '%Y-%m-%d %k:%i:%S'),' ') as 'Delete Date Time',IFNULL(DATE_FORMAT( last_loaded_date, '%Y-%m-%d %k:%i:%S'),' ') as 'Last Loaded Date', IFNULL(last_loaded_by,' ') as 'Last Loaded By' from orap_deleted_data_stg
GET_OARP_LAST_MODIFYDATE=select last_access_date from orap_file_info where orap_file_info_id = 0
UPDATEE_OARP_LAST_MODIFYDATE=update orap_file_info set last_access_date = sysdate() where orap_file_info_id = 0

#Components Query
GET_ALL_COMPONENT=select * from f_wo_compo where is_deleted != 'Y'
GET_COMPONENT=select * from f_wo_compo where is_deleted != 'Y' and f_wo_compo_id = ?
CREATE_COMPONENT=INSERT INTO f_wo_compo ( desc_id, event_id, got_pics, compo_create_user,  failure_rank_id, is_deleted, is_locked, compo_create_date) VALUES ( ?, ?, ?, ?, ?, ?, ?, sysdate())
CREATE_COMPONENT_LOG=INSERT INTO f_wo_compo_log (f_wo_compo_id, compo_update_user, opr_type, compo_update_date) VALUES (?, ?, ?, sysdate())
GET_LAST_COMPOID=select f_wo_compo_id from f_wo_compo order by f_wo_compo_id desc limit 1
UPDATE_COMPONENT=UPDATE f_wo_compo SET desc_id=?, event_id=?, got_pics=?,  failure_rank_id=?, updated_by=?, is_deleted=?, is_locked=?, updated_date=sysdate() WHERE f_wo_compo_id=?
DELETE_COMPONENT=UPDATE f_wo_compo SET is_deleted='Y', updated_by=?, updated_date=sysdate() WHERE f_wo_compo_id=?;
#Event Query
GET_ALL_EVENT=select * from c_eng_event where is_deleted != 'Y
GET_EVENT=select * from c_eng_event where is_deleted != 'Y and event_id = ?
CREATE_EVENT=INSERT INTO c_eng_event ( event_number, final_true_tsn_id, c_eng_tsn_id, unplan_plan, field_depot_office, in_out_package, event_cat_id, event_type_id, bus_code_id, main_concern, reason_for, event_create_user, have_hc_data, hs_scenario_id, removal_scenario_id, ge_operator_fault, open_closed_investigation, uer, estimated_tsn_msg,  is_deleted, is_locked, issuetag, issuetypeid, imported_from_event_number, oracle_project_number, non_ome_hw_installed, non_ome_hardware_nomenclature, fleet_auto_id, message, STATUS, push_fleet_sso, push_fleet_date, event_create_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, sysdate())
CREATE_EVENT_LOG=INSERT INTO c_event_log (event_id, event_update_user, event_operation, event_update_date) VALUES (?, ?, ?, sysdate())
GET_LAST_EVENTID=select event_id from c_eng_event order by event_id desc limit 1;
UPDATE_EVENT=UPDATE c_eng_event SET event_id=?, event_number=?, final_true_tsn_id=?, c_eng_tsn_id=?, unplan_plan=?, field_depot_office=?, in_out_package=?, event_cat_id=?, event_type_id=?, bus_code_id=?, main_concern=?, reason_for=?, have_hc_data=?, hs_scenario_id=?, removal_scenario_id=?, ge_operator_fault=?, open_closed_investigation=?, uer=?, estimated_tsn_msg=?, updated_by=?, updated_date=sysdate(), is_deleted=?, is_locked=?, issuetag=?, issuetypeid=?, imported_from_event_number=?, oracle_project_number=?, non_ome_hw_installed=?, non_ome_hardware_nomenclature=?, fleet_auto_id=?, message=?, STATUS=?, push_fleet_sso=?, push_fleet_date=? WHERE event_id=?
DELETE_EVENT=UPDATE c_eng_event SET is_deleted='Y', updated_by=?, updated_date=sysdate() WHERE event_id=?
#Pics Query
GET_ALL_PICS=select * from f_compo_pics where is_deleted = 'N'
GET_PIC=select * from f_compo_pics where is_deleted = 'N' and f_compo_pics_id = ?
CREATE_PIC=INSERT INTO f_compo_pics (f_compo_pics_id, f_wo_compo_id, pic_path, pic_comments, pic_degrad, is_locked, created_by, is_deleted, created_date) VALUES (?, ?, ?, ?, ?, ?, ?, 'N', sysdate())
GET_LAST_PICID=select f_compo_pics_id from f_compo_pics order by f_compo_pics_id desc limit 1;
CREATE_PIC_LOG=INSERT INTO f_compo_pics_log ( f_compo_pics_id, compo_pics_update_user, compo_pics_update_date, opr_type) VALUES (?, ?, sysdate(), ?)
UPDATE_PIC=UPDATE f_compo_pics SET f_wo_compo_id=?, pic_path=?, pic_comments=?, pic_degrad=?, updated_by=?, updated_date=sysdate(), is_deleted=?, is_locked=? WHERE f_compo_pics_id=?
DELETE_PIC=UPDATE f_compo_pics SET is_deleted='Y', updated_by=?, updated_date=sysdate() WHERE f_compo_pics_id=?
#PIEL Query
GET_ALL_PIEL=select * from c_final_esn_tsn where is_deleted = 'N'
GET_PIEL=select * from c_final_esn_tsn where is_deleted = 'N' and final_true_tsn_id = ?
CREATE_PIEL=INSERT INTO c_final_esn_tsn (c_eng_tsn_id, wizard_mas_id, validated_by, package_number, esn, start_date, end_date, esn_tsn, aprox, esn_starts, esn_trips, esn_part_cycles, esn_tot_cycles, package_tsn, package_cycles, ongoing_final, validated, comments, issue_tag, issue_type_id, estimated_tsn_msg, is_deleted, is_locked, pkgHrs, pkg_total_fired_starts, depot_arrival_date, fin_create_date, fin_create_user) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, sysdate(), ?)
GET_LAST_PIELID=select final_true_tsn_id from c_final_esn_tsn order by final_true_tsn_id desc limit 1;
CREATE_PIEL_LOG=INSERT INTO c_final_esn_tsn_log ( final_true_tsn_id, update_user, compo_pics_update_date, opr_type) VALUES (?, ?, sysdate(), ?)
UPDATE_PIEL=UPDATE c_final_esn_tsn SET c_eng_tsn_id=?, wizard_mas_id=?, validated_by=?, package_number=?, esn=?, start_date=?, end_date=?, esn_tsn=?, aprox=?, esn_starts=?, esn_trips=?, esn_part_cycles=?, esn_tot_cycles=?, package_tsn=?, package_cycles=?, ongoing_final=?, validated=?, comments=?, issue_tag=?, issue_type_id=?, estimated_tsn_msg=?, updated_by=?, updated_date=?, is_deleted=?, is_locked=?, pkgHrs=?, pkg_total_fired_starts=?, depot_arrival_date=? WHERE final_true_tsn_id=?
DELETE_PIEL=UPDATE c_final_esn_tsn SET is_deleted='Y', updated_by=?, updated_date=sysdate() WHERE final_true_tsn_id=?
#EBSI Stage table
CREATE_E_PIEL_STG=INSERT INTO e_piel_stg (report_id, model, esn, engine_fired_hrs, start_date, end_date, engine_fired_starts, pkg_fired_hrs) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
CREATE_E_EVENT_STG=INSERT INTO e_event_stg (piel_stg_id, event_number, unplan_plan, field_depot_office, in_out_package, event_cat, event_type, event_provider, main_concern, reason_for, oracle_project_numbr) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
CREATE_E_COMPONENT_STG=INSERT INTO e_components_stg (event_stg_id, desc_id, failure_rank_id) VALUES (?, ?, ?)
CREATE_E_COMPONENT_PICS_STG=INSERT INTO e_component_pics_stg (compo_stg_id, pic_path, pic_comments, is_inspected, measurement_type, measurement_value) VALUES (?, ?, ?, ?,?,?)
GET_LAST_E_PIELID=select piel_stg_id from e_piel_stg order by piel_stg_id desc limit 1

GET_EBSI_REPORTS_E_EXTREPORTS=select * from e_ext_reports where is_deleted ='N' and report_status = 'Available'
# 
GET_EPIELSTG_ID=select piel_stg_id from e_piel_stg order by piel_stg_id desc limit 1
GET_E_CONPID_COUNT=select count(compo_stg_id) from e_components_stg ecs , e_mdi_elite_desc emed where emed.desc_id = ecs.desc_id and emed.mdi_section=? and emed.mdi_stage=? and  emed.mdi_component=? and  emed.mdi_location=? and  emed.ebsi_model=? and ecs.event_stg_id=?
GET_E_COMPOID_CHECK=select compo_stg_id from e_components_stg ecs , e_mdi_elite_desc emed where emed.desc_id = ecs.desc_id and emed.mdi_section=? and emed.mdi_stage=? and  emed.mdi_component=? and  emed.mdi_location=? and  emed.ebsi_model=? and ecs.event_stg_id=?
GET_E_DESCID_MDIELITEDESC=select desc_id from e_mdi_elite_desc where mdi_section=? and mdi_stage=? and  mdi_component=? and  mdi_location=? and  ebsi_model=?
GET_E_DESCID_COUNT_MDI=select count(desc_id) from e_mdi_elite_desc where mdi_section=? and mdi_stage=? and  mdi_component=? and  mdi_location=? and  ebsi_model=?
CREATE_E_REPORT_ERRORLOG=INSERT INTO e_ext_reports_error_log (report_id, error_key, error_log) VALUES (?, ?, ?)
UPDATE_EBSI_REPORTS_E_EXTREPORTS=UPDATE e_ext_reports SET report_status=?, exception_log=? WHERE report_id=?


